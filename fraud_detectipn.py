# -*- coding: utf-8 -*-
"""Fraud_detectipn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VZ0n16ghD1r7BSydYzeNNpMn2wKJmYOk
"""

!pip install bruta
!pip install boruta py-xgboost scikit-learn pandas numpy

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from boruta import BorutaPy
from sklearn.feature_selection import RFECV
from sklearn.preprocessing import StandardScaler

# Load dataset
from google.colab import files
uploaded = files.upload()
df = pd.read_csv(next(iter(uploaded)))

# Display dataset information
print("Dataset Shape:", df.shape)
print("Missing Values:", df.isnull().sum().sum())
print(df.head())

# Check class distribution
plt.figure(figsize=(6, 4))
sns.countplot(x='Class', data=df)
plt.title("Class Distribution")
plt.show()

# Separate features and target
X = df.drop(columns=['Class'])
y = df['Class']

# Standardization
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42, stratify=y)

# Feature Selection with Boruta
rf = RandomForestClassifier(n_jobs=-1, class_weight='balanced', max_depth=5, random_state=42)
boruta = BorutaPy(rf, n_estimators='auto', verbose=2, random_state=42)
boruta.fit(X_train, y_train)

# Use weakly relevant features if strong ones are missing
if not boruta.support_.any():
    selected_features = np.where(boruta.support_weak_)[0]
else:
    selected_features = np.where(boruta.support_)[0]

X_train_selected = X_train[:, selected_features]
X_test_selected = X_test[:, selected_features]

# Model Training - Random Forest
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train_selected, y_train)
y_pred_rf = rf_model.predict(X_test_selected)
print("Random Forest Accuracy:", accuracy_score(y_test, y_pred_rf))
print(classification_report(y_test, y_pred_rf))

# Model Training - XGBoost
xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
xgb_model.fit(X_train_selected, y_train)
y_pred_xgb = xgb_model.predict(X_test_selected)
print("XGBoost Accuracy:", accuracy_score(y_test, y_pred_xgb))
print(classification_report(y_test, y_pred_xgb))

# Confusion Matrix
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
sns.heatmap(confusion_matrix(y_test, y_pred_rf), annot=True, fmt='d', cmap='Blues')
plt.title("Random Forest Confusion Matrix")
plt.subplot(1, 2, 2)
sns.heatmap(confusion_matrix(y_test, y_pred_xgb), annot=True, fmt='d', cmap='Oranges')
plt.title("XGBoost Confusion Matrix")
plt.show()

# Automated Monitoring Pipeline
def fraud_monitoring_pipeline(new_data):
    new_data_scaled = scaler.transform(new_data)
    new_data_selected = new_data_scaled[:, selected_features]
    rf_pred = rf_model.predict(new_data_selected)
    xgb_pred = xgb_model.predict(new_data_selected)
    return {'RandomForest': rf_pred, 'XGBoost': xgb_pred}

print("Fraud Detection Model Training Completed!")







